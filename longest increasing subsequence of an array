//Approach : Dynamic Programming space optimized
//Time O(N*N)   Space : O(N)

//To find the LIS for a given array, we need to return max(L(i)) where 0 < i < n.
//Formally, the length of the longest increasing subsequence ending at index i, will be 1 greater than the maximum of lengths of all 
//longest increasing subsequences ending at indices before i, where arr[j] < arr[i] (j < i).
//Ex - For len = 4  , f(4) = 1 + max(f(1), f(2), f(3))
//Thus, we see the LIS problem satisfies the optimal substructure property as the main problem can be solved using solutions to subproblems.

#include <bits/stdc++.h>
using namespace std;

int longestIncreasingSubseq(vector<int> &arr,int n){
    vector<int> dp(n,1);  //for i=0 i.e len 1 arr will have lcs=1 always
    int maxx=1;
    for(int i=1;i<n;i++){
        for(int j=0;j<i;j++){
            if(arr[i]>arr[j]){
                dp[i]=max(dp[i],dp[j]+1); 
                maxx=max(maxx,dp[i]);
            }
        }
    }
    return maxx;
}

int main() {
    int n;
    cin>>n;
    vector<int> arr(n);
    for(int i=0;i<n;i++) cin>>arr[i];
    cout<<longestIncreasingSubseq(arr,n)<<endl;
	return 0;
}

input:
8
10 9 2 5 3 7 101 18
Output:
4
