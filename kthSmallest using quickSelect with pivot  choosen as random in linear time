//Idea is to use pivot based separation, not to do complete quicksort,
//but stop at the point where pivot itself is kâ€™th smallest element. 
//Also, not to recur for both left and right sides of pivot, 
//but recur for one of them according to the position of pivot.

//The worst case time complexity of this method is O(n2), but it works in O(n) on average.
//which is further optimised by choosing random element as pivot
//After which Expected complexity will be O(n)

#include <bits/stdc++.h>
using namespace std;

int partition(int *arr,int l,int r){
    int pivot=arr[r];
    int i=l;
    for(int j=l;j<=r-1;j++){
        if(arr[j]<=pivot){
            swap(arr[i],arr[j]);
            i++;
        }
    }
    swap(arr[i],arr[r]);
    return i;
}

int randomPartition(int *arr,int l,int r){
    int n=r-l+1; //no of elements in subarray
    int pivot=rand()%n;
    swap(arr[l+pivot],arr[r]);
    return partition(arr,l,r);
}

//Here advantage is that we can recurse either side
//if k<pivot_pos then recurse for left partition 
//if k>pivot_pos then recurse for right partition
//k==pivot_po then return arr[k] required element
int kthSamllest(int *arr,int l,int r,int k){
    if(k>0 && k<=r-l+1){  //check if k<=no of elements
        //int position=partition(arr,l,r);        //last element is choosen as pivot
        int position=randomPartition(arr,l,r);    //pivot is randomly choosen
        if(position-l+1==k) return arr[position];
        if(position-l+1>k)
            return kthSamllest(arr,l,position-1,k);
        return kthSamllest(arr,position+1,r,k-position+l-1);
    }
    return INT_MAX;
}


int main(){
    int n,k;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++) cin>>arr[i];
    cin>>k;
    cout<<kthSamllest(arr,0,n-1,k)<<endl;
	return 0;
}


input:
7
3 6 8 11 9 2 4
4
output:
6
