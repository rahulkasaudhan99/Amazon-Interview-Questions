//Print all k-sum paths in a binary tree
//A binary tree and a number k are given. Print every path in the tree with sum of the nodes in the path as k. 
//A path can start from any node and end at any node and must be downward only,  
//i.e. they need not be root node and leaf node; and negative numbers can also be there in the tree.

//Approach: idea to solve the problem is to do a preorder traversal of the given tree. 
//We also need a container (vector) to keep track of the path that led to that node. 
//At each node we check if there are any path that sums to k, 
//if any we print the path and proceed recursively to print each path

#include <bits/stdc++.h>
using namespace std;
class TreeNode{
    int val;
    public:
    TreeNode *left,*right;
    TreeNode(){
        this->val=0;
        left=right=NULL;
    }
    TreeNode(int v){
        this->val=v;
        left=right=NULL;
    }
    //idea is to do preorder traversal
    void printKSumPath(TreeNode* root,vector<int> &path,int k){
        if(!root) return;
        path.push_back(root->val);
        printKSumPath(root->left,path,k);
        printKSumPath(root->right,path,k);
        int sum=0;
        for(int i=path.size()-1;i>=0;i--){
            sum+=path[i];
            if(sum==k){
                for(int j=i;j<path.size();j++) cout<<path[j]<<" ";
                cout<<endl;
            }
        }
        
        path.pop_back();
    }
};
    
int main() {
    TreeNode* root = NULL;
    root=new TreeNode(1);
    root->left = new TreeNode(3);
    root->left->left = new TreeNode(2);
    root->left->right = new TreeNode(1);
    root->left->right->left = new TreeNode(1);
    root->right = new TreeNode(-1);
    root->right->left = new TreeNode(4);
    root->right->left->left = new TreeNode(1);
    root->right->left->right = new TreeNode(2);
    root->right->right = new TreeNode(5);
    root->right->right->right = new TreeNode(2);
    
    TreeNode tree;
    int k=5;
    vector<int> path;
    tree.printKSumPath(root,path,k);
	return 0;
}

output:
3 2 
3 1 1 
1 3 1 
4 1 
1 -1 4 1 
-1 4 2 
5 
1 -1 5 
