Approach : Using Dp
Complexity : 
      Time : O(N)            //single loop used
      Space : O(N)          //arr of size N used (T1[n] and T2[n])
      We can optimize space complexity to const space O(1) by just using var T1 and T2   as we always need only previous value of T1 and T2
      
      
#include <bits/stdc++.h>
using namespace std;

#define vvi vector<vector<int>>

int minAssemblyLine(vvi &stationTime,vvi &lineChange,int n,int entry1,int entry2,int exit1,int exit2){
    int T1[n],T2[n];  //T1[j] = min time required at line1 to leave station j ..... for T2[j] at line2
    //min time to leave station1 on line 1 and 2 are 
    T1[0]=stationTime[0][0]+entry1;
    T2[0]=stationTime[1][0]+entry2;
    for(int j=1;j<n;j++){
        //take min of these 2 cases 1. coming from same line   2. coming from other line   
        //T1[j]=min( (min time for leaving from j-1 th station on line1 + time req on j th station on line1) , 
        //           (min time for leaving from j-1 th station on line2 + extra time to change line2 to line1
        //                                                              +time req on j th station) )
        T1[j]=min( T1[j-1]+stationTime[0][j] , T2[j-1]+stationTime[0][j]+lineChange[1][j] );
        T2[j]=min( T2[j-1]+stationTime[1][j] , T1[j-1]+stationTime[1][j]+lineChange[0][j] );
       
        //or we can use siply T1 and T2 var - space optimization 
    }
    //at last return min of (min time leaving last station + respective exit time) for both line
    return min( T1[n-1]+exit1 , T2[n-1]+exit2 );
}


int main() {
	int n;  //n=no of stations
	cin>>n;
	vvi stationTime(2,vector<int> (n)); //station time on line 1 and 2
	for(int i=0;i<2;i++){
	    for(int j=0;j<n;j++) cin>>stationTime[i][j];
	}
	vvi lineChange(2,vector<int> (n)); //cost Change line from 1,j-1 to 2,j or 2,j-1 to 1,j
	for(int i=0;i<2;i++){
	    for(int j=0;j<n;j++) cin>>lineChange[i][j];   
	}
	int entry1,entry2;   //entry time line 1 and 2
	int exit1,exit2;     //exit time line 1 and 2
	cin>>entry1>>entry2;
	cin>>exit1>>exit2;
	
	cout<<minAssemblyLine(stationTime,lineChange,n,entry1,entry2,exit1,exit2);
	
	return 0;
}


intput:
4
4 5 3 2
2 10 1 4
0 7 4 5
0 9 2 8
10 12
18 7

Output:  35



//Space optimized
int minAssemblyLine(vvi &stationTime,vvi &lineChange,int n,int entry1,int entry2,int exit1,int exit2){
    //min time to leave station1 on line 1 and 2 are
    int T1=stationTime[0][0]+entry1;
    int T2=stationTime[1][0]+entry2;
    for(int j=1;j<n;j++){                                                          
        int t1=T1;
        T1=min( T1+stationTime[0][j] , T2+stationTime[0][j]+lineChange[1][j] );
        T2=min( T2+stationTime[1][j] , t1+stationTime[1][j]+lineChange[0][j] );
    }
    //at last return min of (min time leaving last station + respective exit time) for both line
    return min( T1+exit1 , T2+exit2 );
}
