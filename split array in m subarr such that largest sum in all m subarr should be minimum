Approach
  //the min largest sum will be in between max(nums) and sum(nums)
  //our answer will be in range max(nums) - sum(nums)
  //we will check for each val in this range that if we can split array in m subarrays
  //such that largest sum of all subarray <= val
  //instead of using linear search we'll use binary search 
  //which will reduce checking time from O(n) to O(log n)

  //Time Complexity : O(k log n) where k=sum(nums)-max(nums)



#include<bits/stdc++.h>
using namespace std;

//Function to count no of subarrays formed such that for each subarr sum(subarr)<=val 
int countSubarrays(vector<int> &nums,int val){
    int count=1;
    int tempSum=0;
    for(int i=0;i<nums.size();i++){
        if(tempSum+nums[i]>val){
            tempSum=nums[i];
            count++;
        }
        else tempSum+=nums[i];
    }
    return count;
}
int splitArray(vector<int>& nums, int m) {
    int low=nums[0],high=nums[0];
    int n=nums.size();

    for(int i=1;i<n;i++) low=max(low,nums[i]),high+=nums[i];
    
    int ans;
    while(low<=high){
        int mid=(low+high)/2;
        //count no of subarrays formed such that for each subarr sum(subarr)<=val
        int noOfSubarrays=countSubarrays(nums,mid);
        //if more than m subarrays can be formed having each subarr sum(sumarr)<=mid
        //then we have to increase size of some subarr
        //then val can be greater than mid
        //else val can be less than mid
        if(noOfSubarrays>m){
            low=mid+1;
        }
        else {
            high=mid-1,ans=mid;
        }
        
    }  
    return ans;
}


int main(){
    int n,m;
    cin>>n>>m;
    vector<int> nums(n);
    for(int i=0;i<n;i++) cin>>nums[i];
    cout<<splitArray(nums,m);
}
