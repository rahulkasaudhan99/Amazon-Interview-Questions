//Given a binary tree, find the maximum path sum. The path may start and end at any node in the tree.
//Approach:
//For each node there can be four ways that the max path goes through the node: 
//1. Node only 
//2. Max path through Left Child + Node 
//3. Max path through Right Child + Node 
//4. Max path through Left Child + Node + Max path through Right Child
//The idea is to keep trace of four paths and pick up the max one in the end. 
//An important thing to note is, root of every subtree need to return maximum path sum 
//such that at most one child of root is involved. This is needed for parent function call.

#include <bits/stdc++.h>
using namespace std;

class TreeNode{
    int val;
    public:
    TreeNode *left;
    TreeNode *right;
    //non parametrized constructor
    TreeNode(){
        this->val=0;
        this->left=NULL;
        this->right=NULL;
    }
    //parametrized constructor
    TreeNode(int v){
        this->val=v;
        this->left=NULL;
        this->right=NULL;
    }
    int maxPathSum(TreeNode* root,int &res){
        if(!root) return 0;
        //cout<<res<<endl;
        int l=maxPathSum(root->left,res);
        int r=maxPathSum(root->right,res);
        //including root or
        //including root + either left child or right child
        int maxSingle=max(root->val,root->val+max(l,r));
        //including all root+left+right child
        int maxTop=max(maxSingle,root->val+l+r);
        res=max(res,maxTop);
        return maxSingle;
    }
};
    

int main() {
    TreeNode* root=NULL;
    root=new TreeNode(10);
    root->left=new TreeNode(2);
    root->right=new TreeNode(10);
    root->left->left=new TreeNode(20);
    root->left->right=new TreeNode(1);
    root->right->right=new TreeNode(-25);
    root->right->right->left=new TreeNode(3);
    root->right->right->right=new TreeNode(4);
    
    int res=INT_MIN;
    TreeNode tree;
    tree.maxPathSum(root,res);
    cout<<res<<endl;
    
	return 0;
}

Output:  42
