#include <bits/stdc++.h>
using namespace std;


Method 1: without duplicates only unique numbers in nums
////////////////////////////////////////////////
vector<vector<int>> res;
void subset1(vector<int> &nums){
    int N=pow(2,nums.size()); //size of powerset or all possible subsets 
    for(int i=0;i<N;i++){
        vector<int> temp;
        int x=i,k=0;
        while(x){
            if(x&1) temp.push_back(nums[k]);
            k++;
            x=x>>1;
        }
        res.push_back(temp);
    }
}

Method 2: with duplicates - using backtracking with avoiding duplicates
////////////////////////////////////////////////
vector<vector<int>> ans;
void subset2(int start,vector<int> &nums,vector<int> &curr){
    ans.push_back(curr);
    for(int i=start;i<nums.size();i++){
        if(i>start && nums[i-1]==nums[i]) continue;
        curr.push_back(nums[i]);
        subset2(i+1,nums,curr);
        curr.pop_back();
    }
}

void printSubset(vector<vector<int>> &v){
    for(int i=0;i<v.size();i++){
        for(int x:v[i]) cout<<x<<" ";
        cout<<endl;
    }
}



int main() {
    int n;
    cin>>n;
    vector<int> nums(n);
    for(int i=0;i<n;i++) cin>>nums[i];
    subset1(nums);
    printSubset(res);
    
    vector<int> curr;
    sort(nums.begin(),nums.end());
    subset2(0,nums,curr);
    printSubset(ans);
	// your code goes here
	return 0;
}


Input:
3
1 2 3
Output:

1 
2 
1 2 
3 
1 3 
2 3 
1 2 3 

1 
1 2 
1 2 3 
1 3 
2 
2 3 
3 

Input:
3
1 2 2
Output:

1 
2 
1 2 
2 
1 2 
2 2 
1 2 2 

1 
1 2 
1 2 2 
2 
2 2 

