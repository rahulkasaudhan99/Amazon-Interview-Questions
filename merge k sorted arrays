Method 1
//Naive Approach : The very naive method is to create an output array of size n * k and then copy all the elements into the output array followed by sorting.
//Time Complexity : O(n*k*log(n*k)). 
//Space Complexity : O(n*k)

Method 2
//Efficient Approach :The process might begin with merging arrays into groups of two. After the first merge, we have k/2 arrays. 
//Again merge arrays in groups, now we have k/4 arrays. This is similar to merge sort. 
//Divide k arrays into two halves containing an equal number of arrays until there are two arrays in a group. 
//This is followed by merging the arrays in a bottom-up manner. 
Algorithm:
//Create a recursive function which takes k arrays and returns the output array.
//In the recursive function, if the value of k is 1 then return the array else if the value of k is 2 then merge the two arrays in linear time and return the array.
//If the value of k is greater than 2 then divide the group of k elements into two equal halves and recursively call the function, 
//i.e 0 to k/2 array in one recursive function and k/2 to k array in another recursive function.
//Print the output array.

Time Complexity: O( n * k * log k). 
There are log k levels as in each level the k arrays are divided in half and at each level the k arrays are traversed. So time Complexity is O( n * k ).
Space Complexity: O( n * k * log k). 
In each level O( n*k ) space is required So Space Complexity is O( n * k * log k).


#include<bits/stdc++.h>
using namespace std;
#define n 4
void merge(int *arr1,int *arr2,int size1,int size2,int *outputarr){
    int i=0,j=0,k=0;
    while(i<size1 && j<size2){
        if(arr1[i]<arr2[j]) outputarr[k++]=arr1[i++];
        else outputarr[k++]=arr2[j++];
    }
    while(i<size1) outputarr[k++]=arr1[i++];
    
    while(j<size2) outputarr[k++]=arr2[j++];
    return;
}

void mergeKArrays(int arr[][n],int start,int end,int *output){
    if(start==end) {
        for(int i=0;i<n;i++) output[i]=arr[start][i];
        return;
    }
    if(end-start==1) {
        merge(arr[start],arr[end],n,n,output);
    }
    int mid=(start+end)/2;
    int size1=n*(mid-start+1);
    int size2=n*(end-mid);
    int output1[size1],output2[size2];
    mergeKArrays(arr,start,mid,output1);
    mergeKArrays(arr,mid+1,end,output2);
    
    merge(output1,output2,size1,size2,output);
}


int main(){
    //int n;
    //cin>>n;
    int arr[][n] =  {{2, 6, 12, 34},
                     {1, 9, 20, 1000},
                     {23, 34, 90, 2000}};
                     int k = sizeof(arr)/sizeof(arr[0]);
    int output[n*k];
    mergeKArrays(arr,0,2, output);
    for(int x:output) cout<<x<<" ";
    cout<<endl;
    
    
    return 0;
}

output :
1 2 6 9 12 20 23 34 34 90 1000 2000 


Method 3
Approach : using min heap -  For a different and particular sized array, this solution works much better.
// The process must start with creating a MinHeap and inserting the first element of all the k arrays. 
//Remove the root element of Minheap and put it in the output array and insert the next element from the array of removed element.
// To get the result the step must continue until there is no element in the MinHeap left. 

Time Complexity :O( n * k * log k), Insertion and deletion in a Min Heap requires log k time. So the Overall time complexity is O( n * k * log k)
Space Complexity :O(k), If Output is not stored then the only space required is the Min-Heap of k elements. So space Complexity is O(k).


#include <bits/stdc++.h>
using namespace std;
#define pii pair<int,int>

//total k arrays to be merged
void mergeKArrays(vector<vector<int>> &arr,int k,vector<int> &output,vector<int> &next){
    //next array stores next element index for each element in minHeap
    //minHeap using priority_queue of pair<int,int>
    //where first is the element and second is index of which array elements belongs
    priority_queue<pii,vector<pii>,greater<pii>> minHeap;
    //push first element from all k arrays to minHeap
    for(int i=0;i<k;i++) {
        minHeap.push(make_pair(arr[i][0],i));
    }
    while(!minHeap.empty()){
        //min element popped at top of minHeap
        pii minNode=minHeap.top();
        minHeap.pop();
        int element=minNode.first;
        int index=minNode.second;
        int nxt=next[index]++;
        output.push_back(element);
        //if the element popped from minHeap has next element in that array 
        if(nxt<arr[index].size()){
            pii nextMinNode=make_pair(arr[index][nxt],index);
            //push next element from that array to minHeap else continue
            minHeap.push(nextMinNode);
        }
    }
}

int main() {
	vector<vector<int>> arr{{2, 6, 12, 34},
                     {1, 9, 20, 1000},
                     {23, 34, 90, 2000}};
    int k=3;
    //next array stores next element index for each element in minHeap
    vector<int> next(3,1);
    vector<int> output; // to store the final output array is passed by reference
    mergeKArrays(arr,k,output,next);
    for(int x:output) cout<<x<<" ";
	return 0;
}



output :
1 2 6 9 12 20 23 34 34 90 1000 2000 
