Method 1: Simple method is to check for each subarray
Time : O(N*N)

Method 2: Use hashing  
//Maintain sum of elements encountered so far in a variable (say sum).
//If current sum is 0, we found a subarray starting from index 0 and ending at index current index
//Check if current sum exists in the hash table or not.
//If current sum already exists in the hash table then it indicates that this sum was the sum of some sub-array elements arr[0]…arr[i] 
//and now the same sum is obtained for the current sub-array arr[0]…arr[j] which means that the sum of the sub-array arr[i+1]…arr[j] must be 0.
//Insert current sum into the hash table

#include <bits/stdc++.h>
using namespace std;

vector<pair<int,int>> zeroSumSubarray(vector<int> &arr,int n){
    vector<pair<int,int>> res;
    unordered_map<int,vector<int>> map;
    
    int sum=0;
    for(int i=0;i<n;i++){
        sum+=arr[i];
        if(sum==0) res.push_back({0,i});
        if(map.find(sum)!=map.end()){
            for(int x:map[sum]){
                res.push_back({x+1,i});
            }
        }
        map[sum].push_back(i);
    }
    return res;
}

int main() {
	int n;
	cin>>n;
	vector<int> arr(n);
	for(int i=0;i<n;i++) cin>>arr[i];
	vector<pair<int,int>> ans;
	ans=zeroSumSubarray(arr,n);
	for(auto x:ans) cout<<x.first<<" "<<x.second<<endl;
	return 0;
}


input:
11
6 3 -1 -3 4 -2 2 4 6 -12 -7

output:
2 4
2 6
5 6
6 9
0 10
