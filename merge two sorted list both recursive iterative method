#include <bits/stdc++.h>
using namespace std;

class List{
    int val;
    List* next;
    public:
    List(){
        this->val=0;
        this->next=NULL;
    }
    List(int v){
        this->val=v;
        this->next=NULL;
    }
    List* pushBack(List *head,int v){
        if(head==NULL) return new List(v);
        List* ptr=head;
        while(ptr->next) ptr=ptr->next;
        ptr->next=new List(v);
        return head;
    }
    //merge function taking only two pointer
    List* merge(List* head1,List* head2){
        if(head1==NULL) return head2;
        if(head2==NULL) return head1;
        List* head=NULL;
        if(head1->val<=head2->val){
            head=head1;
            head1=head1->next;
        }
        else{
            head=head2;
            head2=head2->next;
        }
        List* tail=head;
        while(head1 && head2){
            if(head1->val<=head2->val){
                tail->next=head1;
                head1=head1->next;
            }
            else{
                tail->next=head2;
                head2=head2->next;
            }
            tail=tail->next;
        }
        while(head1){
            tail->next=head1;
            head1=head1->next;
            tail=tail->next;
        }
        while(head2){
            tail->next=head2;
            head2=head2->next;
            tail=tail->next;
        }
        return head;
    }
    //merge func using recursion takes extra space for recursion stack O(n)
    List* mergeRec(List* head1,List* head2){
        if(head1==NULL) return head2;
        if(head2==NULL) return head1;
        List* res;
        if(head1->val<=head2->val){
            res=head1;
            res->next=mergeRec(head1->next,head2);
        }
        else{
            res=head2;
            res->next=mergeRec(head1,head2->next);
        }
        return res;
    }
    void printList(List *head){
        while(head){
            cout<<head->val<<" -> ";
            head=head->next;
        }
        cout<<endl;
    }
    
};


int main() {
    int n1,n2;
    cin>>n1>>n2;
    List *h1=NULL;
    List *h2=NULL;
    List L;
    for(int i=0;i<n1;i++){
        int z;
        cin>>z;
        h1=L.pushBack(h1,z);
    }
    for(int i=0;i<n2;i++){
        int z;
        cin>>z;
        h2=L.pushBack(h2,z);
    }
    //List *head1=L.mergeRec(h1,h2);
    List *head2=L.merge(h1,h2);
    //L.printList(head1);
    L.printList(head2);
    
	// your code goes here
	return 0;
}


input:
4 4
4 8 15 19
7 9 10 16
output: 
4 -> 7 -> 8 -> 9 -> 10 -> 15 -> 16 -> 19 -> 

Complexity Analysis:
Recursive  O(n) space for recursion stack
space O(1)
time O(n)
